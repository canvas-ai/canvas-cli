name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3-beta.1, etc.

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Update version in source
      run: |
        sed -i "s/version: '1.0.0-alpha'/version: '${{ steps.extract_version.outputs.version }}'/" src/index.js

    - name: Build all platforms
      run: |
        echo "Building for all platforms..."

        # Ensure dist directory exists and has proper permissions
        mkdir -p dist
        chmod 755 dist

        echo "🔨 Building Linux x64..."
        bun run build:linux || (echo "❌ Linux x64 build failed" && exit 1)

        echo "🔨 Building Linux ARM64..."
        bun run build:linux-arm || (echo "❌ Linux ARM64 build failed" && exit 1)

        echo "🔨 Building macOS x64..."
        bun run build:macos || (echo "❌ macOS x64 build failed" && exit 1)

        echo "🔨 Building macOS ARM64..."
        bun run build:macos-arm || (echo "❌ macOS ARM64 build failed" && exit 1)

        echo "🔨 Building Windows x64..."
        bun run build:windows || (echo "❌ Windows x64 build failed" && exit 1)

        echo "✅ All builds completed successfully!"

        # Verify all expected files exist
        echo "🔍 Verifying build outputs..."
        ls -la dist/

        for file in canvas-linux canvas-linux-arm canvas-macos canvas-macos-arm canvas-windows.exe; do
          if [ ! -f "dist/$file" ]; then
            echo "❌ Missing expected build output: dist/$file"
            exit 1
          else
            echo "✅ Found: dist/$file"
          fi
        done

    - name: Test binaries
      run: |
        echo "Testing Linux binary..."
        ./dist/canvas-linux --version
        echo "Binary tests passed!"

    - name: Prepare release assets
      run: |
        mkdir -p release-assets

        # Copy binaries with proper names
        echo "📦 Copying binaries to release assets..."

        echo "Copying Linux x64..."
        cp dist/canvas-linux release-assets/canvas-linux-x64 || (echo "❌ Failed to copy Linux x64 binary" && exit 1)

        echo "Copying Linux ARM64..."
        cp dist/canvas-linux-arm release-assets/canvas-linux-arm64 || (echo "❌ Failed to copy Linux ARM64 binary" && exit 1)

        echo "Copying macOS x64..."
        cp dist/canvas-macos release-assets/canvas-macos-x64 || (echo "❌ Failed to copy macOS x64 binary" && exit 1)

        echo "Copying macOS ARM64..."
        cp dist/canvas-macos-arm release-assets/canvas-macos-arm64 || (echo "❌ Failed to copy macOS ARM64 binary" && exit 1)

        echo "Copying Windows x64..."
        cp dist/canvas-windows.exe release-assets/canvas-windows-x64.exe || (echo "❌ Failed to copy Windows x64 binary" && exit 1)

        echo "✅ All binaries copied successfully!"

        # Create compressed archives
        cd release-assets

        # Linux
        tar -czf canvas-${{ steps.extract_version.outputs.version }}-linux-x64.tar.gz canvas-linux-x64
        tar -czf canvas-${{ steps.extract_version.outputs.version }}-linux-arm64.tar.gz canvas-linux-arm64

        # macOS
        tar -czf canvas-${{ steps.extract_version.outputs.version }}-macos-x64.tar.gz canvas-macos-x64
        tar -czf canvas-${{ steps.extract_version.outputs.version }}-macos-arm64.tar.gz canvas-macos-arm64

        # Windows
        zip canvas-${{ steps.extract_version.outputs.version }}-windows-x64.zip canvas-windows-x64.exe

        # Create checksums
        sha256sum *.tar.gz *.zip > checksums.txt

        ls -la

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Canvas CLI ${{ steps.extract_version.outputs.tag }}

        ### Download

        Choose the appropriate binary for your platform:

        | Platform | Architecture | Download |
        |----------|-------------|----------|
        | Linux | x64 | [canvas-${{ steps.extract_version.outputs.version }}-linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.extract_version.outputs.tag }}/canvas-${{ steps.extract_version.outputs.version }}-linux-x64.tar.gz) |
        | Linux | ARM64 | [canvas-${{ steps.extract_version.outputs.version }}-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.extract_version.outputs.tag }}/canvas-${{ steps.extract_version.outputs.version }}-linux-arm64.tar.gz) |
        | macOS | x64 | [canvas-${{ steps.extract_version.outputs.version }}-macos-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.extract_version.outputs.tag }}/canvas-${{ steps.extract_version.outputs.version }}-macos-x64.tar.gz) |
        | macOS | ARM64 (Apple Silicon) | [canvas-${{ steps.extract_version.outputs.version }}-macos-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.extract_version.outputs.tag }}/canvas-${{ steps.extract_version.outputs.version }}-macos-arm64.tar.gz) |
        | Windows | x64 | [canvas-${{ steps.extract_version.outputs.version }}-windows-x64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.extract_version.outputs.tag }}/canvas-${{ steps.extract_version.outputs.version }}-windows-x64.zip) |

        ### Installation

        1. Download the appropriate archive for your platform
        2. Extract the binary
        3. Make it executable (Linux/macOS): `chmod +x canvas-*`
        4. Optionally, move to a directory in your PATH

        ### Quick Start

        ```bash
        # Linux/macOS
        ./canvas-linux-x64 --version
        ./canvas-linux-x64 --help

        # Windows
        canvas-windows-x64.exe --version
        canvas-windows-x64.exe --help
        ```

        ### Features

        - ✅ Standalone binaries (no runtime dependencies)
        - ✅ Cross-platform support
        - ✅ Full Canvas CLI functionality
        - ✅ AI assistant integration
        - ✅ Context and workspace management

        ### Verification

        Verify download integrity using the provided checksums:
        ```bash
        sha256sum -c checksums.txt
        ```
        EOF

        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.extract_version.outputs.tag }}
        name: Canvas CLI ${{ steps.extract_version.outputs.tag }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}
        files: |
          release-assets/*.tar.gz
          release-assets/*.zip
          release-assets/checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup old releases
      run: |
        echo "🧹 Cleaning up old releases (keeping last 5)..."

        # Get all releases sorted by creation date (newest first)
        gh release list --limit 100 --json tagName,createdAt \
          --jq 'sort_by(.createdAt) | reverse | .[5:] | .[].tagName' > old_releases.txt

        # Count releases to delete
        RELEASES_TO_DELETE=$(wc -l < old_releases.txt)

        if [ "$RELEASES_TO_DELETE" -gt 0 ]; then
          echo "Found $RELEASES_TO_DELETE old releases to delete:"
          cat old_releases.txt

          # Delete old releases
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "🗑️  Deleting release: $tag"
              gh release delete "$tag" --yes --cleanup-tag || echo "⚠️  Failed to delete $tag"
            fi
          done < old_releases.txt

          echo "✅ Cleanup completed!"
        else
          echo "✅ No old releases to clean up (less than 5 total releases)"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
